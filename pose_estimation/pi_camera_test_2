import time
import mediapipe as mp
import numpy as np
import functions
from collections import deque
from picamera2 import Picamera2

# Initialize timer
last_wave_detection_time = time.time()

mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

FRAME_RATE = 20  # Process frames at 10 FPS
RESOLUTION = (320, 240)
seconds = 3
WINDOW_SIZE = FRAME_RATE * seconds

# Deques to store the last 3 seconds of angles
left_angle_list = deque(maxlen=WINDOW_SIZE)
right_angle_list = deque(maxlen=WINDOW_SIZE)

# Initialize Picamera2
picam2 = Picamera2()
camera_config = picam2.create_preview_configuration(main={"format": "RGB888", "size": RESOLUTION})
picam2.configure(camera_config)
picam2.start()

print("Camera initialized. Processing frames...")

try:
    while True:
        # Capture frame from Picamera2
        frame = picam2.capture_array()

        # Convert frame to RGB (Picamera2 already outputs RGB format)
        frame_rgb = frame

        # Process the frame for pose detection
        pose_results = pose.process(frame_rgb)

        if pose_results.pose_landmarks:
            # Extract keypoints
            left_shoulder = pose_results.pose_landmarks.landmark[11]
            left_elbow = pose_results.pose_landmarks.landmark[13]
            left_wrist = pose_results.pose_landmarks.landmark[15]
            right_shoulder = pose_results.pose_landmarks.landmark[12]
            right_elbow = pose_results.pose_landmarks.landmark[14]
            right_wrist = pose_results.pose_landmarks.landmark[16]
            head = pose_results.pose_landmarks.landmark[0]

            # Calculate angles
            left_angle = functions.calculate_angle(left_shoulder, left_elbow, left_wrist)
            right_angle = functions.calculate_angle(right_shoulder, right_elbow, right_wrist)

            # Append angles
            left_angle_list.append(left_angle)
            right_angle_list.append(right_angle)

            # Check if 3 seconds have passed since the last wave detection
            current_time = time.time()
            if current_time - last_wave_detection_time >= 3:
                left_wave_detected = functions.detect_wave_motion(
                    list(left_angle_list), left_wrist, left_elbow
                )
                right_wave_detected = functions.detect_wave_motion(
                    list(right_angle_list), right_wrist, right_elbow
                )

                # Print results
                print(f"Left Wave Detected: {left_wave_detected}")
                print(f"Right Wave Detected: {right_wave_detected}")

                # Update the timer
                last_wave_detection_time = current_time
                functions.follow_human(head)

        # Add a delay to control the frame rate
        time.sleep(1 / FRAME_RATE)

except KeyboardInterrupt:
    print("Stopped by user.")

finally:
    # Stop the camera
    picam2.stop()
    print("Camera stopped.")
